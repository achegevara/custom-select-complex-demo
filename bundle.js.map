{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://task-ozi_complex/./src/app.js"],"sourcesContent":["import \"./css/app.css\";\n\n(function () {\n    function createOptionsTree(select) {\n        const selectArr = [];\n        for (let option of select.options) {\n            let obj = {\n                text: option.text,\n                childList: [],\n                value: option.value\n            };\n            if (!option.dataset.level) {\n                selectArr.push(obj);\n            }\n            else if (selectArr.length > 0) {\n                const parent = getNthParent(selectArr[selectArr.length - 1], parseInt(option.dataset.level));\n                parent.childList.push(obj);\n            }\n        }\n        return selectArr;\n    }\n\n    function getNthParent(option, level) {\n        let resultOption = option;\n        --level;\n        while (--level) {\n            let childList = resultOption.childList;\n            resultOption = childList[childList.length - 1];\n        }\n        return resultOption;\n    }\n\n    function createTreeDom(arr) {\n\n        let ul = document.createElement('ul');\n\n        for (let option of arr) {\n            let li = document.createElement('li');\n            li.classList.add(\"selectWindow__list-item\");\n            li.insertAdjacentHTML(\"afterbegin\", `<label class=\"checkbox\">\n                                                  <input value=\"${option.value}\" type=\"checkbox\" class=\"checkbox__input\">\n                                                  <div class=\"checkbox__state\">\n                                                      <div class=\"checkbox__control\">\n                                                          <svg class=\"checkbox__icon\" width=\"13\" height=\"13\" viewBox=\"0 0 12 15\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                                              <path d=\"M1.71484 7.92681L5.60056 10.9913L10.4577 3.33011\" stroke=\"white\" stroke-width=\"1.3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n                                                          </svg>    \n                                                      </div>\n                                                  </div>\n                                                  <span class=\"checkbox__legend selectWindow__list-item-text\">\n                                                  ${option.text}\n                                                </span>\n                                              </label>`\n            );\n            if (option.childList.length > 0) {\n                let childrenUl = createTreeDom(option.childList);\n                if (childrenUl) {\n                    li.append(childrenUl);\n                }\n            }\n            ul.classList.add('selectWindow__sublist');\n            ul.append(li);\n        }\n        return ul;\n    }\n\n    // Отрисовываем DOM\n    function createDOM() {\n\n        // Для каждого мультиселекта на странице...\n        let multiSelects = document.querySelectorAll('.multiSelect');\n        for (let multiSelect of multiSelects) {\n\n            // Передаём мультиселект для подготовки дерева опций.\n            let finalArr = createOptionsTree(multiSelect);\n\n            // Создаём контейнер.\n            let container = document.createElement('div');\n            container.classList.add(\"container\");\n            document.body.append(container);\n            container.append(multiSelect);\n\n            // Название нашего селекта.\n            let headerTitle = document.createElement('p');\n            headerTitle.classList.add(\"header__title\");\n            headerTitle.textContent = \"Выбор мультфильмов\";\n\n            // Кнопку \"Показать выбранное\".\n            let showSelected = document.createElement(\"button\");\n            showSelected.setAttribute(\"type\", \"button\");\n            showSelected.classList.add(\"header__button_showSelected\");\n            let closestSelect = container.querySelector(\".multiSelect\");\n            showSelected.textContent = `Показать выбранное (${getSelectValues(closestSelect).length})`;\n\n            // Хедер.\n            let header = document.createElement(\"div\");\n            header.classList.add(\"header\");\n            header.append(headerTitle);\n            header.append(showSelected);\n            container.append(header);\n\n            // Создаём поле индикации выбора.\n            let selectField = document.createElement(\"div\");\n            selectField.classList.add(\"selectField\");\n            selectField.textContent = \"Пока ничего не выбрано\";\n            container.append(selectField);\n\n            // Окно выбора опций.\n            let selectWindow = document.createElement(\"div\");\n            selectWindow.classList.add(\"selectWindow\");\n\n            let selectHeader = document.createElement(\"div\");\n            selectHeader.classList.add(\"selectWindow__header\");\n            selectWindow.append(selectHeader);\n\n            // Название окна выбора опций.\n            let selectTitle = document.createElement(\"div\");\n            selectTitle.classList.add(\"selectWindow__title\");\n            selectTitle.innerHTML = `<svg class=\"selectWindow__back-arrow\" width=\"20\" height=\"24\" viewBox=\"0 0 20 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                    <path d=\"M10 2.68524L3 11.8787M3 11.8787L10 21.0721M3 11.8787H18\" stroke=\"black\" stroke-width=\"1.5\" stroke-linejoin=\"round\"/>\n                                  </svg>\n                              <p>Выбор мультфильмов</p>`;\n            selectHeader.append(selectTitle);\n\n            // Поле поиска.\n            let searchField = document.createElement(\"input\");\n            searchField.classList.add(\"selectWindow__searchField\");\n            searchField.setAttribute(\"type\", \"text\");\n            selectHeader.append(searchField);\n\n            // Создаём DOM на основе дерева опций, добавляем его в окно выбора опций.\n            selectWindow.append(createTreeDom(finalArr));\n\n            // Кнопка \"Применить\".\n            let applyButton = document.createElement(\"button\");\n            applyButton.setAttribute(\"type\", \"button\");\n            applyButton.classList.add(\"selectWindow__apply-button\");\n            let applyButtonText = document.createElement(\"span\");\n            applyButtonText.textContent = \"Применить\";\n            applyButtonText.classList.add(\"selectWindow__apply-button-text\");\n            applyButton.append(applyButtonText);\n\n            // Кнопка \"Очистить\".\n            let clearButton = document.createElement(\"button\");\n            clearButton.setAttribute(\"type\", \"button\");\n            clearButton.classList.add(\"selectWindow__clear-button\");\n            clearButton.textContent = \"Очистить\";\n\n            // Контейнер для кнопок \"Применить\" и \"Очистить\".\n            let buttonsWrapper = document.createElement(\"div\");\n            buttonsWrapper.classList.add(\"selectWindow__buttons-wrapper\");\n            selectWindow.append(buttonsWrapper);\n\n            buttonsWrapper.append(applyButton);\n            buttonsWrapper.append(clearButton);\n\n            container.append(selectWindow);\n\n            // Правим классы основного списка для корректной работы кода.\n            let uls = selectWindow.querySelectorAll('ul');\n            uls[0].classList.remove('selectWindow__sublist');\n            uls[0].classList.add('selectWindow__list');\n        }\n    }\n    createDOM();\n\n    function addArrows() {\n        let liTexts = document.querySelectorAll(\".selectWindow__list-item\");\n        for (let li of liTexts) {\n            if (li.closest(\".selectWindow__list-item\").querySelector(\".selectWindow__sublist\")) {\n                li.insertAdjacentHTML(\"afterbegin\", `<svg class=\"selectWindow__arrow\" width=\"12\" height=\"12\" viewBox=\"0 0 12 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                                  <path d=\"M3 5L5.92468 8L9 5\" stroke=\"black\" stroke-linejoin=\"round\"/>\n                                                </svg>`);\n            }\n        }\n    }\n    addArrows();\n\n    // Добавляем обработчики событий на элементы.\n    function addListeners() {\n        let containers = document.querySelectorAll(\".container\");\n        for (let container of containers) {\n\n            let showSelected = container.querySelector(\".header__button_showSelected\");\n            showSelected.addEventListener(\"click\", openList1);\n\n            let selectField = container.querySelector(\".selectField\");\n            selectField.addEventListener(\"click\", openList2);\n\n            let backArrow = container.querySelector(\".selectWindow__back-arrow\");\n            backArrow.addEventListener(\"click\", goBack);\n\n            let applyButton = container.querySelector(\".selectWindow__apply-button\");\n            applyButton.addEventListener(\"click\", handleApply);\n\n            let checkItems = container.querySelectorAll(\".checkbox__input\");\n            for (let item of checkItems) {\n                item.addEventListener(\"change\", checkSelects);\n            }\n\n            let clearButton = container.querySelector(\".selectWindow__clear-button\");\n            clearButton.addEventListener(\"click\", clearChecks);\n\n            let multiSelect = container.querySelector('.multiSelect');\n            multiSelect.addEventListener(\"change\", onSelectChange);\n\n            let listItems = container.querySelectorAll(\".selectWindow__list-item-text\");\n            for (let item of listItems) {\n                item.addEventListener(\"click\", handleSub);\n            }\n            let arrows = container.querySelectorAll(\".selectWindow__arrow\");\n            for (let arrow of arrows) {\n                arrow.addEventListener(\"click\", handleSub);\n            }\n\n            let checks = container.querySelectorAll(\".checkbox\");\n            for (let check of checks) {\n                check.addEventListener(\"click\", handleCheck);\n            }\n        }\n    }\n    addListeners();\n\n    function handleSub(e) {\n        let sub = e.currentTarget.closest(\".selectWindow__list-item\").querySelector(\".selectWindow__sublist\");\n        e.stopPropagation();\n        if (e.target.classList.contains(\"checkbox\")) return\n        if (sub) {\n            sub.classList.toggle(\"visible\");\n\n            if (sub.classList.contains(\"visible\")) {\n                e.currentTarget.closest(\".selectWindow__list-item\").querySelector(\".selectWindow__arrow\").innerHTML = `<svg class=\"arrow\" width=\"12\" height=\"12\" viewBox=\"0 0 12 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M3 8L5.92468 5L9 8\" stroke=\"black\" stroke-linejoin=\"round\"/>\n            </svg>`;\n            } else {\n                e.currentTarget.closest(\".selectWindow__list-item\").querySelector(\".selectWindow__arrow\").innerHTML = `<svg class=\"arrow\" width=\"12\" height=\"12\" viewBox=\"0 0 12 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M3 5L5.92468 8L9 5\" stroke=\"black\" stroke-linejoin=\"round\"/>\n            </svg>`;\n            }\n        }\n    }\n\n    function handleCheck(e) {\n        let targetCheck = e.target.closest(\".checkbox\").querySelector(\".checkbox__input\");\n        let otherChecks = targetCheck.closest(\".selectWindow__list-item\").querySelectorAll(\".checkbox__input\");\n        targetCheck.checked = !targetCheck.checked;\n        for (let item of otherChecks) {\n            if (targetCheck.checked) {\n                item.checked = true;\n            } else {\n                item.checked = false;\n            }\n        }\n    }\n\n    function openList1(e) {\n        document.querySelectorAll(\".selectWindow_visible\").forEach((elem) => elem.classList.remove(\"selectWindow_visible\"));\n        e.target.closest(\".container\").querySelector(\".selectWindow\").classList.toggle(\"selectWindow_visible\");\n    }\n\n    // Обработчик клика по полю индикации выбора. Открывает окно выбора опций.\n    function openList2(e) {\n        document.querySelectorAll(\".selectWindow_visible\").forEach((elem) => elem.classList.remove(\"selectWindow_visible\"));\n        e.target.parentNode.querySelector(\".selectWindow\").classList.toggle(\"selectWindow_visible\");\n    }\n\n    function goBack(e) {\n        e.target.closest(\".selectWindow\").classList.remove(\"selectWindow_visible\");\n    }\n\n    // Обработка клика по кнопке \"Применить\".\n    function handleApply(event) {\n        let closestContainer = event.target.closest(\".container\");\n        let allChecks = closestContainer.querySelectorAll(\".checkbox__input\");\n        let storeChecked = [];\n        for (let check of allChecks) {\n            if (check.checked == true) {\n                storeChecked.push(check);\n            }\n            else continue\n        }\n        let fieldSelect = closestContainer.querySelector(\".selectField\");\n        if (storeChecked.length > 0) {\n            let firstCheckText = storeChecked[0].closest(\".selectWindow__list-item\").querySelector(\".selectWindow__list-item-text\").textContent;\n            fieldSelect.textContent = firstCheckText;\n            fieldSelect.classList.add(\"selectField_some-selected\");\n        } else {\n            fieldSelect.textContent = \"Пока ничего не выбрано\";\n            fieldSelect.classList.remove(\"selectField_some-selected\");\n        }\n\n        let showSelected = closestContainer.querySelector(\".header__button_showSelected\");\n        showSelected.textContent = `Показать выбранное (${storeChecked.length})`;\n\n        closestContainer.querySelector(\".selectWindow\").classList.remove(\"selectWindow_visible\");\n        checkSelects();\n    }\n\n    // Стилизация выбранных опций.\n    function checkSelects() {\n        let containers = document.querySelectorAll(\".container\");\n        for (let container of containers) {\n            let listItems = container.querySelectorAll(\".selectWindow__list-item\");\n            for (let item of listItems) {\n                if (item.querySelector(\".checkbox__input\").checked == true) {\n                    item.style.background = \"linear-gradient(0deg, rgba(3, 91, 119, 0.05), rgba(3, 91, 119, 0.05)), #FFFFFF\";\n                } else {\n                    item.style.background = \"transparent\";\n                    // listItems[0].querySelector(\".checkbox__input\").checked = false;\n                }\n            }\n        }\n    }\n\n    // Сброс всех выбранных опций в контейнере.\n    function clearChecks(event) {\n        let container = event.target.closest(\".container\");\n        let clearButton = container.querySelector(\".selectWindow__clear-button\");\n        let allCheckInputs = clearButton.closest(\".selectWindow\").querySelectorAll(\".checkbox__input\");\n        for (let item of allCheckInputs) {\n            item.checked = false;\n        }\n    }\n\n    // Получение опций с атрибутом \"selected\" из переданного селекта.\n    function getSelectValues(select) {\n        let result = [];\n        let options = select && select.options;\n        let opt;\n\n        for (let i = 0; i < options.length; i++) {\n            opt = options[i];\n            if (opt.selected) {\n                result.push(opt.value || opt.text);\n            }\n        }\n        return result;\n    }\n\n    // Обработчик изменений в селекте.\n    function onSelectChange(event) {\n        if (event.target == document) {\n            let containers = document.querySelectorAll(\".container\");\n            for (let container of containers) {\n                processSelectChange(container);\n            }\n        } else {\n            let container = event.target.closest(\".container\");\n            processSelectChange(container)\n        }\n\n        function processSelectChange(container) {\n            let multiSelect = container.querySelector('.multiSelect');\n            let allSelected = getSelectValues(multiSelect);\n\n            let inputs = container.querySelectorAll(\".checkbox__input\");\n            for (let input of inputs) {\n                if (allSelected.includes(input.value)) {\n                    input.checked = true;\n                } else {\n                    input.checked = false;\n                }\n            }\n\n            let click = new Event(\"click\");\n            let applyButton = container.querySelector(\".selectWindow__apply-button\");\n            applyButton.dispatchEvent(click);\n        }\n    }\n\n    // При загрузке страницы будут проверены атрибуты \"selected\" для их незамедлительной отрисовки в UI.\n    window.onload = onSelectChange;\n\n})();"],"names":["createOptionsTree","select","selectArr","options","option","obj","text","childList","value","dataset","level","length","getNthParent","parseInt","push","resultOption","createTreeDom","arr","ul","document","createElement","li","classList","add","insertAdjacentHTML","childrenUl","append","handleSub","e","sub","currentTarget","closest","querySelector","stopPropagation","target","contains","toggle","innerHTML","handleCheck","targetCheck","otherChecks","querySelectorAll","checked","item","openList1","forEach","elem","remove","openList2","parentNode","goBack","handleApply","event","closestContainer","storeChecked","check","fieldSelect","firstCheckText","textContent","checkSelects","style","background","clearChecks","getSelectValues","opt","result","i","selected","onSelectChange","processSelectChange","container","allSelected","input","includes","click","Event","dispatchEvent","multiSelect","finalArr","body","headerTitle","showSelected","setAttribute","closestSelect","header","selectField","selectWindow","selectHeader","selectTitle","searchField","applyButton","applyButtonText","clearButton","buttonsWrapper","uls","createDOM","addArrows","addEventListener","addListeners","window","onload"],"sourceRoot":""}